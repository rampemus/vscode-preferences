{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create arrow function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "component",
		"body": [
			"import React from 'react'",
			"",
			"const $TM_FILENAME_BASE: React.FC = (props) => {",
			"",
			"",
			"    return(",
			"        <div>$TM_FILENAME</div>",
			"    )",
			"}",
			"",
			"export default $TM_FILENAME_BASE",
			""
		],
		"description": "Create component (arrow function)"
	},
	"Add connect statement with mapState/DispatchToProps": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "connectToStore",
		"body": [
			"interface OwnProps {}",
			"export interface StateProps {}",
			"export interface DispatchProps {}",
			"",
			"const mapStateToProps = (state: AppState, props: OwnProps) => {",
			"    return {",
			"        propname: state.proplocation",
			"    }",
			"}",
			"",
			"const mapDispatchToProps: DispatchProps = {",
			"    functionName",
			"}",
			"",
			"type Props = OwnProps & StateProps & DispatchProps",
			"",
			"export default connect(mapStateToProps,mapDispatchToProps)($TM_FILENAME_BASE)",
			""
		],
		"description": "Add connect component to store"
	},
	"Create reducer": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "reducer",
		"body": [
			"interface ${TM_FILENAME_BASE}State {",
			"",
			"}",
			"",
			"interface ${TM_FILENAME_BASE}Action {",
			"    type: string,",
			"    data: ${TM_FILENAME_BASE}State",
			"}",
			"",
			"const initState: ${TM_FILENAME_BASE}State = {",
			"",
			"}",
			"",
			"const ${TM_FILENAME_BASE}Reducer = (state:${TM_FILENAME_BASE}State = initState, action:${TM_FILENAME_BASE}Action) => {",
			"    switch (action.type) {",
			"    case 'SET_STATE': {",
			"        return action.data",
			"    }",
			"    default: return state",
			"    }",
			"}",
			"",
			"export const setState = (data:${TM_FILENAME_BASE}State ) => {",
			"    const action:${TM_FILENAME_BASE}Action = {",
			"        type: 'SET_STATE',",
			"        data: data",
			"    }",
			"    return action",
			"}",
			"",
			"export default ${TM_FILENAME_BASE}Reducer"
		],
		"description": "Create reducer"
	},
	"servicebase": {
		"prefix": "service",
		"body": [
			"import axios from 'axios'",
			"const baseUrl = '/api/${TM_FILENAME_BASE}'",
			"",
			"const getAll = () => {",
			"    const request = axios.get(baseUrl)",
			"    return request.then(response => response.data)",
			"}",
			"",
			"export default { getAll }",
			""
		],
		"description": "serviceBase"
	},
	"mongoosemodel": {
		"prefix": "mongoosemodel",
		"body": [
			"const mongoose = require('mongoose')",
			"",
			"const modelSchema = mongoose.Schema({",
			"  item: {",
			"    type: String,",
			"    required: true,",
			"    minlength: 2",
			"  },",
			"})",
			"",
			"modelSchema.set('toJSON', {",
			"  transform: (document, returnedObject) => {",
			"    returnedObject.id = returnedObject._id.toString()",
			"    delete returnedObject._id",
			"  }",
			"})",
			"",
			"const Model = mongoose.model('Model', modelSchema)",
			"",
			"module.exports = $MT_FILENAME_BASE",
			""
		],
		"description": "mongoosemodel"
	},
}
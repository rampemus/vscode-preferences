{
	"Create pure react arrow function": {
		"scope": "javascript,javascriptreact",
		"prefix": "component",
		"body": [
			"import React from 'react'",
			"",
			"const $TM_FILENAME_BASE = ({ children }) => {",
			"  ${1}",
			"  return(",
			"    <div className={props.className}>",
			"      $TM_FILENAME",
			"      {children}",
			"    </div>",
			"  )",
			"}",
			"",
			"export default $TM_FILENAME_BASE",
			"${0}"
		],
		"description": "Create component (arrow function)"
	},
	"Create typed pure react arrow function": {
		"scope": "typescript,typescriptreact",
		"prefix": "component",
		"body": [
			"import React from 'react'",
			"",
			"interface IProps {",
			"  children?: React.ReactNode",
			"}",
			"",
			"const $TM_FILENAME_BASE: React.FC<IProps> = ({ children }) => {",
			"  ${1}",
			"  return(",
			"    <div>",
			"      $TM_FILENAME",
			"      {children}",
			"    </div>",
			"  )",
			"}",
			"",
			"export default $TM_FILENAME_BASE",
			"${0}"
		],
		"description": "Create component (arrow function)"
	},
	"Create react function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "classcomponent",
		"body": [
			"import React from 'react'",
			"",
			"class $TM_FILENAME_BASE extends React.Component {",
			"  constructor(props) {",
			"    this.state = {${1}}",
			"  }",
			"  render() {",
			"    return (",
			"      <div>",
			"        $TM_FILENAME_BASE",
			"      </div>",
			"    )",
			"  }",
			"}${0}",
			"",
			"export default $TM_FILENAME_BASE"
		]
	},
	"Add connect statement with mapState/DispatchToProps": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "reduxconnectstore",
		"body": [
			"interface OwnProps {}",
			"export interface StateProps {}",
			"export interface DispatchProps {}",
			"",
			"const mapStateToProps = (state: AppState, props: OwnProps) => {",
			"  return {",
			"    propname: state.proplocation",
			"  }",
			"}",
			"",
			"const mapDispatchToProps: DispatchProps = {",
			"    functionName",
			"}",
			"",
			"type Props = OwnProps & StateProps & DispatchProps",
			"",
			"export default connect(mapStateToProps,mapDispatchToProps)($TM_FILENAME_BASE)",
			""
		],
		"description": "Add connect component to store"
	},
	"Create reducer": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "reduxreducer",
		"body": [
			"interface ${TM_FILENAME_BASE}State {",
			"",
			"}",
			"",
			"interface ${TM_FILENAME_BASE}Action {",
			"  type: string,",
			"  data: ${TM_FILENAME_BASE}State",
			"}",
			"",
			"const initState: ${TM_FILENAME_BASE}State = {",
			"",
			"}",
			"",
			"const ${TM_FILENAME_BASE}Reducer = (state:${TM_FILENAME_BASE}State = initState, action:${TM_FILENAME_BASE}Action) => {",
			"  switch (action.type) {",
			"    case 'SET_STATE': {",
			"      return action.data",
			"    }",
			"    default: return state",
			"  }",
			"}",
			"",
			"export const setState = (data:${TM_FILENAME_BASE}State ) => {",
			"  const action:${TM_FILENAME_BASE}Action = {",
			"    type: 'SET_STATE',",
			"    data: data",
			"  }",
			"  return action",
			"}",
			"",
			"export default ${TM_FILENAME_BASE}Reducer"
		],
		"description": "Create reducer"
	},
	"switch statement": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "switch",
		"body": [
			"switch(${1:expression}) {",
			"  case '${3:case}':",
			"    ${4}",
			"    break",
			"  ${0}",
			"  default:",
			"    ${2}",
			"}"
		]
	}
}

{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"Vue component skeleton": {
		"scope": "vue",
		"prefix": "template",
		"body": [
			"<template>",
			"  ${1}",
			"</template>",
			"<script src=\"./App.js\"></script>",
			"<style src=\"./App.scss\" module lang=\"scss\"></style>"
		],
		"description": "Vue skeleton to init vue component"
	},
	"Vue typescript component skeleton": {
		"scope": "vue",
		"prefix": "template",
		"body": [
			"<template>",
			"  ${1}",
			"</template>",
			"<script lang='ts'>",
			"",
			"import { Options, Vue } from 'vue-class-component'",
			"",
			"@Options({",
			"  props: {},",
			"  components: {},",
			"  data() {",
			"    return {}",
			"  },",
			"})",
			"",
			"export default class $TM_FILENAME_BASE extends Vue {}",
			"</script>",
			"",
			"<style scoped lang='scss'></style>"
		],
		"description": "Vue typescript skeleton to init vue component"
	},
	"Vuex store typescript skeleton": {
		"scope": "typescript",
		"prefix": "store",
		"body": [
			"import { InjectionKey } from 'vue'",
			"import { createStore, useStore as baseUseStore, Store } from 'vuex'",
			"",
			"export interface State {",
			"  user: {",
			"    firstname: string",
			"    lastname: string",
			"    admin: boolean",
			"  }",
			"}",
			"",
			"export const key: InjectionKey<Store<State>> = Symbol()",
			"",
			"const store = {",
			"  state: {",
			"    user: {",
			"      firstname: 'Teppo',",
			"      lastname: 'Testaava',",
			"      admin: false,",
			"    },",
			"  },",
			"  mutations: {",
			"    godMode(state: State) {",
			"      state.user.admin = true",
			"    },",
			"  },",
			"  actions: {},",
			"  modules: {},",
			"}",
			"export default createStore<State>(store)",
			"",
			"export function useStore() {",
			"  return baseUseStore(key)",
			"}"
		]
	},
	"Vuex store javascript skeleton": {
		"scope": "javascript",
		"prefix": "store",
		"body": [
			"import { createStore } from 'vuex'",
			"",
			"const store = {",
			"  state: {",
			"    user: {",
			"      firstname: 'Teppo',",
			"      lastname: 'Testaava',",
			"      admin: false,",
			"    },",
			"  },",
			"  mutations: {",
			"    godMode(state: State) {",
			"      state.user.admin = true",
			"    },",
			"  },",
			"  actions: {},",
			"  modules: {},",
			"}",
			"",
			"export default createStore(store)",
			""
		]
	}
}

